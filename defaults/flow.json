[{"id":"1b9edd3.478b123","type":"ibmiot out","z":"2071657b.b13b4a","authentication":"boundService","apiKey":"","outputType":"evt","deviceId":"manuplant1","deviceType":"manuplant","eventCommandType":"update","format":"json","data":"all","qos":"","name":"Send to IBM IoT Platform","service":"registered","x":630,"y":168,"wires":[]},{"id":"871ed022.210158","type":"inject","z":"2071657b.b13b4a","name":"Send Data","topic":"","payload":"true","payloadType":"bool","repeat":"","crontab":"","once":false,"x":160,"y":168,"wires":[["8ebf63de.33a378"]]},{"id":"8ebf63de.33a378","type":"function","z":"2071657b.b13b4a","name":"Device payload","func":"// Array of pseudo random temperatures\nvar humidity1 = [15,17,15,17,15,17,15,17,18.5,20,21.5,33,44,52.2,21.5,15,17,15,17,15,17,15,17,18.5,20,21.5,33,44,52.2,21.5,33,44,52.2,33,44,52.2,89,98];\n// Array of pseudo random relative humidities\nvar temp1 = [20,21,21.5,20,29,28,29,31,29,32,28,34,20,21,21.5,20,29,28,29,31,29,32,28,34,20,21,21.5,20,29,28,29,31,29,32,28,34,50,55,49,45,47];\n//Array for Rotation Speed\nvar speed1 = [1000, 2200, 2200, 2200, 2200, 2200, 2200, 2200, 2300, 2300, 2300, 2300, 2300, 2300, 2400, 2400, 2400, 2400, 2400, 2400, 2400, 2900, 2900, 2900, 2900, 2900, 2900, 2900, 2900, 3200, 4000, 2200, 3200, 4000, 5000, 3660, 3670, 3680, 3690, 4000];\n\n// Counter to select from array.\nvar counter1 = context.get('counter1')||0;\n/*\ncounter1 = counter1+1;\nif(counter1 > 9) counter1 = 0;\n*/\nidxHumidity = Math.floor(Math.random() * (humidity1.length - 1)+1);\nidxTemp = Math.floor(Math.random() * (temp1.length - 1)+1);\nidxSpeed = Math.floor(Math.random() * (speed1.length - 1)+1);\ncounter1 = Math.floor(Math.random() * (10-1)+1);\ncontext.set('counter1',counter1+1);\n\n// Create MQTT message in JSON\nmsg = {\n payload: JSON.stringify(\n {\n d: {\n \"humidity\" : humidity1[idxHumidity],\n \"temp\" : temp1[idxTemp],\n \"speed\" : speed1[idxSpeed]\n }\n }\n )\n};\n\n/*\nvar temperature = Math.floor(Math.random() * (200-1) + 1);\nvar humidity = Math.floor(Math.random() * (100-1) + 1);\nvar speed = Math.floor(Math.random() * (5000-1) + 1);\n\nvar holdTemp = context.get('holdTemp')||20;\nvar holdHumidity = context.get('holdHumidity')||20;\nvar holdSpeed = context.get('holdSpeed')||4000;\n\n// Randomize the Temperature\nif(holdTemp === 20){\n holdTemp = temperature;\n} else if ((temperature >= (holdTemp * 0.85)) && (temperature <= (holdTemp * 1.15))) {\n holdTemp = temperature;\n}\ncontext.set('holdTemp',holdTemp);\n\n// Randomize the Humidity\nif(holdHumidity === 20){\n holdHumidity = humidity;\n} else if ((humidity >= (holdHumidity * 0.8)) && (humidity <= (holdHumidity * 1.2))) {\n holdHumidity = humidity;\n}\ncontext.set('holdHumidity',holdHumidity);\n\n\n// Randomize the Humidity\nif(holdSpeed === 4000){\n holdSpeed = speed;\n} else if ((humidity >= (speed * 0.7)) && (humidity <= (speed * 1.3))) {\n holdSpeed = speed;\n}\ncontext.set('holdSpeed',holdSpeed);\n\n// Create MQTT message in JSON\nmsg = {\n payload: JSON.stringify(\n {\n \"temperature\" : holdTemp,\n \"humidity\" : holdHumidity,\n \"speed\" : holdSpeed,\n }\n )\n};\n\n*/\nreturn msg;\n","outputs":1,"noerr":0,"x":380,"y":168,"wires":[["1b9edd3.478b123","d79bb985.528668"]]},{"id":"d79bb985.528668","type":"debug","z":"2071657b.b13b4a","name":"Debug output payload","active":true,"console":"false","complete":"payload","x":620,"y":228,"wires":[]},{"id":"5c3a7598.7e9ad4","type":"comment","z":"2071657b.b13b4a","name":"Device Simulator","info":"Sends simulated device sensor data to IBM Watson IoT Plaform.\n\nCan be configured to send on click or on an automatic interval.\n\n\n#Prerequisite\nOutput node device type and device ID need to match a device that it registered in a running IBM Watson IoT Platform service.\n\n# Watson IoT Platform docs\n[Connecting devices](https://www.bluemix.net/docs/services/IoT/iotplatform_task.html)","x":160,"y":88,"wires":[]},{"id":"6bb1cea3.16fbf8","type":"comment","z":"2071657b.b13b4a","name":"1. Configure target","info":"","x":610,"y":128,"wires":[]},{"id":"e25fa3cd.40ec68","type":"comment","z":"2071657b.b13b4a","name":"2. Click to send data","info":"To automatically send data:\n1. Change *Repeat* to interval.\n2. Click Deploy button.\n","x":170,"y":208,"wires":[]},{"id":"e6df2df5.cce438","type":"ibmiot in","z":"2071657b.b13b4a","authentication":"boundService","apiKey":"","inputType":"evt","deviceId":"manuplant1","applicationId":"","deviceType":"+","eventType":"+","commandType":"","format":"json","name":"IBM IoT","service":"registered","allDevices":"","allApplications":"","allDeviceTypes":true,"allEvents":true,"allCommands":"","allFormats":"","qos":0,"x":170,"y":467,"wires":[["e2e0c5e0.78d048","efae059.32189f8","cb639caa.bae23"]]},{"id":"e2e0c5e0.78d048","type":"function","z":"2071657b.b13b4a","name":"Temp Payload","func":"return {payload:msg.payload.d.temp};","outputs":1,"noerr":0,"x":368,"y":560,"wires":[["d47eabf8.858378","4d230f2e.0557b8"]]},{"id":"d47eabf8.858378","type":"ui_gauge","z":"2071657b.b13b4a","name":"Temp Gauge","group":"4230bce0.2a114c","order":1,"width":"0","height":"0","gtype":"gage","title":"Temp Level","label":"%C","format":"{{value}}","min":"0","max":"100","colors":["#00b500","#e6e600","#ca3838"],"x":664,"y":510,"wires":[]},{"id":"e0af2716.249c18","type":"ui_gauge","z":"2071657b.b13b4a","name":"Humidity Gauge","group":"e3a10847.0ead3","order":1,"width":"0","height":"0","gtype":"donut","title":"Humidity Level","label":"%","format":"{{value}}","min":"0","max":"100","colors":["#00b500","#e6e600","#ca3838"],"x":660,"y":306,"wires":[]},{"id":"efae059.32189f8","type":"function","z":"2071657b.b13b4a","name":"Humidity payload","func":"return {payload:msg.payload.d.humidity};","outputs":1,"noerr":0,"x":380,"y":385,"wires":[["e0af2716.249c18","86874211.461da8"]]},{"id":"86874211.461da8","type":"ui_chart","z":"2071657b.b13b4a","name":"Humidity Chart","group":"e3a10847.0ead3","order":1,"width":0,"height":0,"label":"Humidity Level","chartType":"line","legend":"false","xformat":"%H:%M:%S","interpolate":"linear","nodata":"","ymin":"0","ymax":"100","removeOlder":1,"removeOlderUnit":"60","x":666,"y":421,"wires":[[],[]]},{"id":"4d230f2e.0557b8","type":"ui_chart","z":"2071657b.b13b4a","name":"Temp Chart","group":"4230bce0.2a114c","order":2,"width":0,"height":0,"label":"Temp Level","chartType":"line","legend":"false","xformat":"%H:%M:%S","interpolate":"linear","nodata":"","ymin":"20","ymax":"60","removeOlder":1,"removeOlderUnit":"60","x":659,"y":613,"wires":[[],[]]},{"id":"cb639caa.bae23","type":"function","z":"2071657b.b13b4a","name":"Speed Payload","func":"return {payload:msg.payload.d.speed};","outputs":1,"noerr":0,"x":380,"y":706,"wires":[["f38b056f.3d8f18","fe40baf7.d02b68"]]},{"id":"f38b056f.3d8f18","type":"ui_gauge","z":"2071657b.b13b4a","name":"Speed Gauge","group":"3274ab7f.ff438c","order":0,"width":0,"height":0,"gtype":"wave","title":"Speed","label":"Kms","format":"{{value}}","min":"1000","max":"5000","colors":["#00b500","#e6e600","#ca3838"],"x":659,"y":680.5,"wires":[]},{"id":"fe40baf7.d02b68","type":"ui_chart","z":"2071657b.b13b4a","name":"Speed Chart","group":"3274ab7f.ff438c","order":0,"width":0,"height":0,"label":"Speed","chartType":"line","legend":"false","xformat":"%H:%M:%S","interpolate":"linear","nodata":"","ymin":"1000","ymax":"5000","removeOlder":1,"removeOlderUnit":"60","x":642,"y":780.5,"wires":[[],[]]},{"id":"4230bce0.2a114c","type":"ui_group","z":"","name":"Temp","tab":"74210012.76ca58","order":2,"disp":true,"width":"8"},{"id":"e3a10847.0ead3","type":"ui_group","z":"","name":"Humidity","tab":"74210012.76ca58","order":1,"disp":true,"width":"8"},{"id":"3274ab7f.ff438c","type":"ui_group","z":"","name":"Speed","tab":"74210012.76ca58","order":3,"disp":true,"width":"8"},{"id":"74210012.76ca58","type":"ui_tab","z":"2071657b.b13b4a","name":"Connected Manufacturing Plant","icon":"dashboard","order":3}]
